(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{729:function(t,a,e){"use strict";e.r(a);var _=e(137),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Git是一个 "),e("strong",[t._v("”分布式版本管理工具”")]),t._v("，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个")]),t._v(" "),e("p",[t._v("功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本")]),t._v(" "),e("p",[t._v("管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。")]),t._v(" "),e("p",[t._v('下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 "页面内查找" 的方式进行快速查询：'),e("code",[t._v("Ctrl/Command+f")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"_01-开卷必读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-开卷必读"}},[t._v("#")]),t._v(" 01 | 开卷必读")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("一定要先测试命令的效果后")]),t._v("，再用于工作环境中，以防造成不能弥补的后果！")])]),t._v(" "),e("li",[e("p",[t._v("所有的命令都在 git version Git-2.32.0.2 下测试通过")])]),t._v(" "),e("li",[e("p",[t._v("统一概念：")]),t._v(" "),e("p",[e("strong",[t._v("工作区")]),t._v("：改动（增删文件和内容）")]),t._v(" "),e("p",[e("strong",[t._v("暂存区")]),t._v("：输入命令："),e("code",[t._v("git add 改动的文件名")]),t._v(" ，此次改动就放到了 ‘暂存区’")]),t._v(" "),e("p",[e("strong",[t._v("本地仓库")]),t._v("(简称：本地)：输入命令： "),e("code",[t._v("git commit 此次修改的描述")]),t._v(" ，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。")]),t._v(" "),e("p",[e("strong",[t._v("远程仓库")]),t._v("(简称：远程)：输入命令： git push 远程仓库 ，此次改动就放到了 ‘远程仓库’（GitHub、Gitee、Gitlab 等)")]),t._v(" "),e("p",[e("strong",[t._v("commit-id")]),t._v("：输出命令："),e("code",[t._v("git log")]),t._v("，最上面那行 "),e("code",[t._v("commit xxxxxx")]),t._v("，后面的字符串就是commit-id")])])]),t._v(" "),e("h2",{attrs:{id:"_02-展示帮助信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-展示帮助信息"}},[t._v("#")]),t._v(" 02 | 展示帮助信息")]),t._v(" "),e("p",[e("code",[t._v("git help -g")])]),t._v(" "),e("p",[t._v("显示如下内容：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("The Git concept guides are:\n   attributes          Defining attributes per path\n   cli                 Git command-line interface and conventions\n   core-tutorial       A Git core tutorial "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" developers\n   credentials         Providing usernames and passwords to Git\n   cvs-migration       Git "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" CVS "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("users")]),t._v("\n   diffcore            Tweaking "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" output\n   everyday            A useful minimum "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" of commands "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Everyday Git\n   faq                 Frequently asked questions about using Git\n   glossary            A Git Glossary\n   hooks               Hooks used by Git\n   ignore              Specifies intentionally untracked files to ignore\n   mailmap             Map author/committer names and/or E-Mail addresses\n   modules             Defining submodule properties\n   namespaces          Git namespaces\n   remote-helpers      Helper programs to interact with remote repositories\n   repository-layout   Git Repository Layout\n   revisions           Specifying revisions and ranges "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Git\n   submodules          Mounting one repository inside another\n   tutorial            A tutorial introduction to Git\n   tutorial-2          A tutorial introduction to Git: part two\n   workflows           An overview of recommended workflows with Git\n\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git help -a'")]),t._v(" and "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git help -g'")]),t._v(" list available subcommands and some\nconcept guides. See "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git help <command>'")]),t._v(" or "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git help <concept>'")]),t._v("\nto "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" about a specific subcommand or concept.\nSee "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git help git'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" an overview of the system.\n\n")])])]),e("h2",{attrs:{id:"_03-回到远程仓库的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_03-回到远程仓库的状态"}},[t._v("#")]),t._v(" 03 | 回到远程仓库的状态")]),t._v(" "),e("p",[t._v("抛弃本地所有的修改，回到远程仓库的状态")]),t._v(" "),e("p",[e("code",[t._v("git fetch --all && git reset --hard origin/master")])]),t._v(" "),e("h2",{attrs:{id:"_04-重设第一个-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_04-重设第一个-commit"}},[t._v("#")]),t._v(" 04 | 重设第一个 commit⭐️")]),t._v(" "),e("p",[t._v("也就是把所有的改动都重新放回工作区，并"),e("strong",[t._v("清空所有的 commit")]),t._v("，这样就可以重新提交第一个 commit了")]),t._v(" "),e("p",[e("code",[t._v("git update-ref -d HEAD")])]),t._v(" "),e("h2",{attrs:{id:"_05-查看冲突文件列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_05-查看冲突文件列表"}},[t._v("#")]),t._v(" 05 | 查看冲突文件列表")]),t._v(" "),e("p",[t._v("展示工作区的冲突文件列表")]),t._v(" "),e("p",[e("code",[t._v("git diff --name-only --diff-filter=U")])]),t._v(" "),e("h2",{attrs:{id:"_06-展示工作区和暂存区的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_06-展示工作区和暂存区的不同"}},[t._v("#")]),t._v(" 06 | 展示工作区和暂存区的不同")]),t._v(" "),e("p",[t._v("输出"),e("strong",[t._v("工作区")]),t._v("和"),e("strong",[t._v("暂存区")]),t._v("的 diﬀerent (不同)。")]),t._v(" "),e("p",[e("code",[t._v("git diff")])]),t._v(" "),e("p",[t._v("还可以展示本地仓库中任意两个 commit 之间的文件变动：")]),t._v(" "),e("p",[e("code",[t._v("git diff <commit-id> <commit-id>")])]),t._v(" "),e("h2",{attrs:{id:"_07-展示暂存区和最近版本的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_07-展示暂存区和最近版本的不同"}},[t._v("#")]),t._v(" 07 | 展示暂存区和最近版本的不同")]),t._v(" "),e("p",[t._v("输出"),e("strong",[t._v("暂存区")]),t._v("和"),e("strong",[t._v("本地最近的版本")]),t._v(" (commit) 的 diﬀerent (不同)。")]),t._v(" "),e("p",[e("code",[t._v("git diff --cached")])]),t._v(" "),e("h2",{attrs:{id:"_08-展示暂存区、工作区和最近版本的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_08-展示暂存区、工作区和最近版本的不同"}},[t._v("#")]),t._v(" 08 | 展示暂存区、工作区和最近版本的不同")]),t._v(" "),e("p",[t._v("输出"),e("strong",[t._v("工作区")]),t._v("、"),e("strong",[t._v("暂存区")]),t._v(" 和"),e("strong",[t._v("本地最近的版本")]),t._v(" (commit) 的 diﬀerent (不同)。")]),t._v(" "),e("p",[e("code",[t._v("git diff HEAD")])]),t._v(" "),e("h2",{attrs:{id:"_09-快速切换到上一个分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_09-快速切换到上一个分支"}},[t._v("#")]),t._v(" 09 | 快速切换到上一个分支")]),t._v(" "),e("p",[e("code",[t._v("git checkout -")])]),t._v(" "),e("h2",{attrs:{id:"_10-删除已经合并到-master-的分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-删除已经合并到-master-的分支"}},[t._v("#")]),t._v(" 10 | 删除已经合并到 "),e("strong",[t._v("master")]),t._v(" "),e("strong",[t._v("的分支")])]),t._v(" "),e("p",[e("code",[t._v("git branch --merged master | grep -v '^\\*\\| master' | xargs -n 1 git branch -d")])]),t._v(" "),e("h2",{attrs:{id:"_11-展示本地分支关联远程仓库的情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-展示本地分支关联远程仓库的情况"}},[t._v("#")]),t._v(" 11 | 展示本地分支关联远程仓库的情况")]),t._v(" "),e("p",[e("code",[t._v("git branch -vv")])]),t._v(" "),e("h2",{attrs:{id:"_12-关联远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-关联远程分支"}},[t._v("#")]),t._v(" 12 | 关联远程分支")]),t._v(" "),e("p",[t._v("关联之后， "),e("code",[t._v("git branch -vv")]),t._v("就可以展示关联的远程分支名了，同时推送到远程仓库直接："),e("code",[t._v("gitpush")]),t._v("，不需要指定远程仓库了。")]),t._v(" "),e("p",[e("code",[t._v("git branch -u origin/mybranch")])]),t._v(" "),e("p",[t._v("或者在 push 时加上 -u 参数")]),t._v(" "),e("p",[e("code",[t._v("git push origin/mybranch -u")])]),t._v(" "),e("h2",{attrs:{id:"_13-列出所有远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-列出所有远程分支"}},[t._v("#")]),t._v(" 13 | 列出所有远程分支")]),t._v(" "),e("p",[t._v("-r 参数相当于：remote")]),t._v(" "),e("p",[e("code",[t._v("git branch -r")])]),t._v(" "),e("h2",{attrs:{id:"_14-列出本地和远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-列出本地和远程分支"}},[t._v("#")]),t._v(" 14 | 列出本地和远程分支")]),t._v(" "),e("p",[t._v("-a 参数相当于：all")]),t._v(" "),e("p",[e("code",[t._v("git branch -a")])]),t._v(" "),e("h2",{attrs:{id:"_15-查看远程分支和本地分支的对应关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-查看远程分支和本地分支的对应关系"}},[t._v("#")]),t._v(" 15 | 查看远程分支和本地分支的对应关系")]),t._v(" "),e("p",[e("code",[t._v("git remote show origin")])]),t._v(" "),e("h2",{attrs:{id:"_16-远程删除了分支本地也想删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-远程删除了分支本地也想删除"}},[t._v("#")]),t._v(" 16 | 远程删除了分支本地也想删除")]),t._v(" "),e("p",[e("code",[t._v("git remote prune origin")])]),t._v(" "),e("h2",{attrs:{id:"_17-创建并切换到本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-创建并切换到本地分支"}},[t._v("#")]),t._v(" 17 | 创建并切换到本地分支")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b <branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_18-从远程分支中创建并切换到本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-从远程分支中创建并切换到本地分支"}},[t._v("#")]),t._v(" 18 | 从远程分支中创建并切换到本地分支")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b <branch-name> origin/<branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_19-删除本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-删除本地分支"}},[t._v("#")]),t._v(" 19 | 删除本地分支")]),t._v(" "),e("p",[e("code",[t._v("git branch -d <local-branchname>")])]),t._v(" "),e("h2",{attrs:{id:"_20-删除远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-删除远程分支"}},[t._v("#")]),t._v(" 20 | 删除远程分支")]),t._v(" "),e("p",[e("code",[t._v("git push origin --delete <remote-branchname>")])]),t._v(" "),e("p",[t._v("或者")]),t._v(" "),e("p",[e("code",[t._v("git push origin :<remote-branchname>")])]),t._v(" "),e("h2",{attrs:{id:"_21-重命名本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-重命名本地分支"}},[t._v("#")]),t._v(" 21 | 重命名本地分支")]),t._v(" "),e("p",[e("code",[t._v("git branch -m <new-branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_22-查看标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-查看标签"}},[t._v("#")]),t._v(" 22 | 查看标签")]),t._v(" "),e("p",[e("code",[t._v("git tag")])]),t._v(" "),e("p",[t._v("展示当前分支的最近的 tag")]),t._v(" "),e("p",[e("code",[t._v("git describe --tags --abbrev=0")])]),t._v(" "),e("h2",{attrs:{id:"_23-查看标签详细信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-查看标签详细信息"}},[t._v("#")]),t._v(" 23 | 查看标签详细信息")]),t._v(" "),e("p",[e("code",[t._v("git tag -ln")])]),t._v(" "),e("h2",{attrs:{id:"_24-本地创建标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-本地创建标签"}},[t._v("#")]),t._v(" 24 | 本地创建标签")]),t._v(" "),e("p",[e("code",[t._v("git tag <version-number>")])]),t._v(" "),e("p",[t._v("默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：")]),t._v(" "),e("p",[e("code",[t._v('git tag -a <version-number> -m "v1.0 发布(描述)" <commit-id>')])]),t._v(" "),e("h2",{attrs:{id:"_25-推送标签到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-推送标签到远程仓库"}},[t._v("#")]),t._v(" 25 | 推送标签到远程仓库")]),t._v(" "),e("p",[t._v("首先要保证本地创建好了标签才可以推送标签到远程仓库：")]),t._v(" "),e("p",[e("code",[t._v("git push origin <local-version-number>")])]),t._v(" "),e("p",[t._v("一次性推送所有标签，同步到远程仓库：")]),t._v(" "),e("p",[e("code",[t._v("git push origin --tags")])]),t._v(" "),e("h2",{attrs:{id:"_26-删除本地标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-删除本地标签"}},[t._v("#")]),t._v(" 26 | 删除本地标签")]),t._v(" "),e("p",[e("code",[t._v("git tag -d <tag-name>")])]),t._v(" "),e("h2",{attrs:{id:"_27-删除远程标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-删除远程标签"}},[t._v("#")]),t._v(" 27 | 删除远程标签")]),t._v(" "),e("p",[e("code",[t._v("git push origin --delete tag <tagname>")])]),t._v(" "),e("h2",{attrs:{id:"_28-切回到某个标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_28-切回到某个标签"}},[t._v("#")]),t._v(" 28 | 切回到某个标签")]),t._v(" "),e("p",[t._v("一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回")]),t._v(" "),e("p",[t._v("到某一标签下的状态：")]),t._v(" "),e("p",[e("code",[t._v("git checkout -b <branch_name> <tag_name>")])]),t._v(" "),e("h2",{attrs:{id:"_29-放弃工作区的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_29-放弃工作区的修改"}},[t._v("#")]),t._v(" 29 | 放弃工作区的修改")]),t._v(" "),e("p",[t._v("放弃对某个文件的修改")]),t._v(" "),e("p",[e("code",[t._v("git checkout <file-name>")])]),t._v(" "),e("p",[t._v("放弃所有修改：")]),t._v(" "),e("p",[e("code",[t._v("git checkout .")])]),t._v(" "),e("h2",{attrs:{id:"_30-恢复删除的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_30-恢复删除的文件"}},[t._v("#")]),t._v(" 30 | 恢复删除的文件")]),t._v(" "),e("p",[e("code",[t._v("git rev-list -n 1 HEAD -- <file_path>")]),t._v(" #得到 deleting_commit")]),t._v(" "),e("p",[e("code",[t._v("git checkout <deleting_commit>^ -- <file_path>")]),t._v(" #回到删除文件 deleting_commit 之前的状态")]),t._v(" "),e("h2",{attrs:{id:"_31-以新增一个-commit-的方式还原某一个-commit-的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_31-以新增一个-commit-的方式还原某一个-commit-的修改"}},[t._v("#")]),t._v(" 31 | 以新增一个 "),e("strong",[t._v("commit")]),t._v(" "),e("strong",[t._v("的方式还原某一个")]),t._v(" "),e("strong",[t._v("commit")]),t._v(" "),e("strong",[t._v("的修改")])]),t._v(" "),e("p",[e("code",[t._v("git revert <commit-id>")])]),t._v(" "),e("h2",{attrs:{id:"_32-回到某个-commit-的状态-并删除后面的-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_32-回到某个-commit-的状态-并删除后面的-commit"}},[t._v("#")]),t._v(" 32 | 回到某个 "),e("strong",[t._v("commit")]),t._v(" "),e("strong",[t._v("的状态，并删除后面的")]),t._v(" "),e("strong",[t._v("commit")])]),t._v(" "),e("p",[t._v("和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit")]),t._v(" "),e("p",[e("code",[t._v("git reset <commit-id>")]),t._v("  #默认就是-mixed参数。")]),t._v(" "),e("p",[e("code",[t._v("git reset --mixed HEAD^")]),t._v("  #回退至上个版本，它将重置HEAD到另外一个commit,并且"),e("strong",[t._v("重置暂存区以便和HEAD相匹配")]),t._v("，但是也到此为止。工作区不会被更改。")]),t._v(" "),e("p",[e("code",[t._v("git reset --soft HEAD~3")]),t._v(" #回退至三个版本之前，只回退了commit的信息，"),e("strong",[t._v("暂存区和工作区与回退之前保持一致")]),t._v("。如果还要提交，直接commit即可")]),t._v(" "),e("p",[e("code",[t._v("git reset --hard <commit-id>")]),t._v("#彻底回退到指定commit-id的状态，"),e("strong",[t._v("暂存区和工作区也会变为指定commit-id版本的内容")])]),t._v(" "),e("h2",{attrs:{id:"_33-修改上一个-commit-的描述-追加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_33-修改上一个-commit-的描述-追加"}},[t._v("#")]),t._v(" 33 | 修改上一个 "),e("strong",[t._v("commit")]),t._v(" 的描述(追加)")]),t._v(" "),e("p",[t._v("如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit")]),t._v(" "),e("p",[e("code",[t._v("git commit --amend")])]),t._v(" "),e("h2",{attrs:{id:"_34-查看-commit历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_34-查看-commit历史"}},[t._v("#")]),t._v(" 34 | 查看 commit历史")]),t._v(" "),e("p",[e("code",[t._v("git log")])]),t._v(" "),e("h2",{attrs:{id:"_35-查看某段代码是谁写的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_35-查看某段代码是谁写的"}},[t._v("#")]),t._v(" 35 | 查看某段代码是谁写的")]),t._v(" "),e("p",[t._v("blame 的意思为‘"),e("strong",[t._v("责怪")]),t._v("’，你懂的。")]),t._v(" "),e("p",[e("code",[t._v("git blame <file-name>")])]),t._v(" "),e("h2",{attrs:{id:"_36-显示本地更新过-head-的-git-命令记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_36-显示本地更新过-head-的-git-命令记录"}},[t._v("#")]),t._v(" 36 | 显示本地更新过 "),e("strong",[t._v("HEAD")]),t._v(" "),e("strong",[t._v("的")]),t._v(" Git "),e("strong",[t._v("命令记录")])]),t._v(" "),e("p",[t._v("每次更新了 HEAD 的 git 命令比如 "),e("strong",[t._v("commit")]),t._v("、"),e("strong",[t._v("amend")]),t._v("、"),e("strong",[t._v("cherry-pick")]),t._v("、"),e("strong",[t._v("reset")]),t._v("、"),e("strong",[t._v("revert")]),t._v(" 等都会被记录下来（不限分支），就像 shell 的 history 一样。")]),t._v(" "),e("p",[t._v("这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。")]),t._v(" "),e("p",[e("code",[t._v("git reflog")])]),t._v(" "),e("h2",{attrs:{id:"_37-修改作者名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_37-修改作者名"}},[t._v("#")]),t._v(" 37 | 修改作者名")]),t._v(" "),e("p",[e("code",[t._v("git commit --amend --author='Author Name <email@address.com>'")])]),t._v(" "),e("h2",{attrs:{id:"_38-修改远程仓库的-url"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_38-修改远程仓库的-url"}},[t._v("#")]),t._v(" 38 | 修改远程仓库的 url")]),t._v(" "),e("p",[e("code",[t._v("git remote set-url origin <URL>")])]),t._v(" "),e("h2",{attrs:{id:"_39-增加远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_39-增加远程仓库"}},[t._v("#")]),t._v(" 39 | 增加远程仓库")]),t._v(" "),e("p",[e("code",[t._v("git remote add origin <remote-url>")])]),t._v(" "),e("h2",{attrs:{id:"_40-列出所有远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_40-列出所有远程仓库"}},[t._v("#")]),t._v(" 40 | 列出所有远程仓库")]),t._v(" "),e("p",[e("code",[t._v("git remote")])]),t._v(" "),e("h2",{attrs:{id:"_41-查看两个星期内的改动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_41-查看两个星期内的改动"}},[t._v("#")]),t._v(" 41 | 查看两个星期内的改动")]),t._v(" "),e("p",[e("code",[t._v("git whatchanged --since='2 weeks ago'")])]),t._v(" "),e("h2",{attrs:{id:"_42-把-a-分支的某一个-commit-放到b-分支上"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_42-把-a-分支的某一个-commit-放到b-分支上"}},[t._v("#")]),t._v(" 42 | 把 A 分支的某一个 commit，放到B 分支上")]),t._v(" "),e("p",[t._v("这个过程需要 "),e("code",[t._v("cherry-pick")]),t._v("命令，"),e("a",{attrs:{href:"http://sg552.iteye.com/blog/1300713#bc2367928",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考")])]),t._v(" "),e("p",[e("code",[t._v("git checkout <branch-name> && git cherry-pick <commit-id>")])]),t._v(" "),e("h2",{attrs:{id:"_43-给-git-命令起别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_43-给-git-命令起别名"}},[t._v("#")]),t._v(" 43 | 给 Git 命令起别名")]),t._v(" "),e("p",[t._v("简化命令")]),t._v(" "),e("p",[e("code",[t._v("git config --global alias.<handle> <command>")])]),t._v(" "),e("p",[t._v("比如：git status 改成 git st，这样可以简化命令")]),t._v(" "),e("p",[e("code",[t._v("git config --global alias.st status")])]),t._v(" "),e("h2",{attrs:{id:"_44-存储当前的修改-但不用提交-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_44-存储当前的修改-但不用提交-commit"}},[t._v("#")]),t._v(" 44 | 存储当前的修改，但不用提交 commit")]),t._v(" "),e("p",[t._v("详解可以参考"),e("a",{attrs:{href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰老师的")]),e("a",{attrs:{href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000",target:"_blank",rel:"noopener noreferrer"}}),e("a",{attrs:{href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000",target:"_blank",rel:"noopener noreferrer"}},[t._v("git")]),e("a",{attrs:{href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000",target:"_blank",rel:"noopener noreferrer"}}),e("a",{attrs:{href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程")])]),t._v(" "),e("p",[e("code",[t._v("git stash")])]),t._v(" "),e("h2",{attrs:{id:"_45-保存当前状态-包括-untracked-的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_45-保存当前状态-包括-untracked-的文件"}},[t._v("#")]),t._v(" 45 | 保存当前状态，包括 untracked 的文件")]),t._v(" "),e("p",[t._v("untracked 文件：新建的文件")]),t._v(" "),e("p",[e("code",[t._v("git stash -u")])]),t._v(" "),e("h2",{attrs:{id:"_46-展示所有-stashes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_46-展示所有-stashes"}},[t._v("#")]),t._v(" 46 | 展示所有 stashes")]),t._v(" "),e("p",[e("code",[t._v("git stash list")])]),t._v(" "),e("h2",{attrs:{id:"_47-回到某个-stash-的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_47-回到某个-stash-的状态"}},[t._v("#")]),t._v(" 47 | 回到某个 stash 的状态")]),t._v(" "),e("p",[e("code",[t._v("git stash apply <stash@{n}>")])]),t._v(" "),e("h2",{attrs:{id:"_48-回到最后一个-stash-的状态-并删除这个-stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_48-回到最后一个-stash-的状态-并删除这个-stash"}},[t._v("#")]),t._v(" 48 | 回到最后一个 stash 的状态，并删除这个 stash")]),t._v(" "),e("p",[e("code",[t._v("git stash pop")])]),t._v(" "),e("h2",{attrs:{id:"_49-删除所有的-stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_49-删除所有的-stash"}},[t._v("#")]),t._v(" 49 | 删除所有的 stash")]),t._v(" "),e("p",[e("code",[t._v("git stash clear")])]),t._v(" "),e("h2",{attrs:{id:"_50-从-stash-中拿出某个文件的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_50-从-stash-中拿出某个文件的修改"}},[t._v("#")]),t._v(" 50 | 从 stash 中拿出某个文件的修改")]),t._v(" "),e("p",[e("code",[t._v("git checkout <stash@{n}> -- <file-path>")])]),t._v(" "),e("h2",{attrs:{id:"_51-展示所有-tracked-的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_51-展示所有-tracked-的文件"}},[t._v("#")]),t._v(" 51 | 展示所有 tracked 的文件")]),t._v(" "),e("p",[e("code",[t._v("git ls-files -t")])]),t._v(" "),e("h2",{attrs:{id:"_52-展示所有-untracked-的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_52-展示所有-untracked-的文件"}},[t._v("#")]),t._v(" 52 | 展示所有 untracked 的文件")]),t._v(" "),e("p",[e("code",[t._v("git ls-files --others")])]),t._v(" "),e("h2",{attrs:{id:"_53-展示所有忽略的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_53-展示所有忽略的文件"}},[t._v("#")]),t._v(" 53 | 展示所有忽略的文件")]),t._v(" "),e("p",[e("code",[t._v("git ls-files --others -i --exclude-standard")])]),t._v(" "),e("h2",{attrs:{id:"_54-强制删除-untracked的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_54-强制删除-untracked的文件"}},[t._v("#")]),t._v(" 54 | 强制删除 untracked的文件")]),t._v(" "),e("p",[t._v("可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。 clean 命令，"),e("strong",[t._v("注意两点")]),t._v("：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("clean 后，删除的文件无法找回")])]),t._v(" "),e("li",[e("p",[t._v("不会影响 tracked 的文件的改动，只会删除 untracked 的文件")])])]),t._v(" "),e("p",[e("code",[t._v("git clean <file-name> -f")])]),t._v(" "),e("h2",{attrs:{id:"_55-强制删除-untracked-的目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_55-强制删除-untracked-的目录"}},[t._v("#")]),t._v(" 55 | 强制删除 untracked 的目录")]),t._v(" "),e("p",[t._v("可以用来删除新建的目录，"),e("strong",[t._v("注意")]),t._v("：这个命令也可以用来删除 untracked 的文件。详情见上一条")]),t._v(" "),e("p",[e("code",[t._v("git clean <directory-name> -df")])]),t._v(" "),e("h2",{attrs:{id:"_56-展示简化的-commit-历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_56-展示简化的-commit-历史"}},[t._v("#")]),t._v(" 56 | 展示简化的 commit 历史")]),t._v(" "),e("p",[e("code",[t._v("git log --pretty=oneline --graph --decorate --all")])]),t._v(" "),e("h2",{attrs:{id:"_67-把某一个分支导出成一个文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67-把某一个分支导出成一个文件"}},[t._v("#")]),t._v(" 67 | 把某一个分支导出成一个文件")]),t._v(" "),e("p",[e("code",[t._v("git bundle create <file> <branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_68-从包中导入分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_68-从包中导入分支"}},[t._v("#")]),t._v(" 68 | 从包中导入分支")]),t._v(" "),e("p",[t._v("新建一个分支，分支内容就是上面 git bundle create 命令导出的内容")]),t._v(" "),e("p",[e("code",[t._v("git clone repo.bundle <repo-dir> -b <branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_69-执行-rebase之前自动-stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_69-执行-rebase之前自动-stash"}},[t._v("#")]),t._v(" 69 | 执行 rebase之前自动 stash")]),t._v(" "),e("p",[e("code",[t._v("git rebase --autostash")])]),t._v(" "),e("h2",{attrs:{id:"_70-从远程仓库根据-id-拉下某一状态-到本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_70-从远程仓库根据-id-拉下某一状态-到本地分支"}},[t._v("#")]),t._v(" 70 | 从远程仓库根据 ID，拉下某一状态，到本地分支")]),t._v(" "),e("p",[e("code",[t._v("git fetch origin pull/<id>/head:<branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_71-详细展示一行中的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_71-详细展示一行中的修改"}},[t._v("#")]),t._v(" 71 | 详细展示一行中的修改")]),t._v(" "),e("p",[e("code",[t._v("git diff --word-diff")])]),t._v(" "),e("h2",{attrs:{id:"_72-清除-gitignore-文件中记录的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_72-清除-gitignore-文件中记录的文件"}},[t._v("#")]),t._v(" 72 | 清除 .gitignore 文件中记录的文件")]),t._v(" "),e("p",[e("code",[t._v("git clean -X -f")])]),t._v(" "),e("h2",{attrs:{id:"_73-展示所有-alias-和-configs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_73-展示所有-alias-和-configs"}},[t._v("#")]),t._v(" 73 | 展示所有 alias 和 conﬁgs")]),t._v(" "),e("p",[e("strong",[t._v("注意：")]),t._v(" conﬁg 分为：当前目录（local）和全局（golbal）的 conﬁg，默认为当前目录的 conﬁg")]),t._v(" "),e("p",[e("code",[t._v("git config --local --list")]),t._v(" (当前目录)")]),t._v(" "),e("p",[e("code",[t._v("git config --global --list")]),t._v(" (全局)")]),t._v(" "),e("h2",{attrs:{id:"_74-展示忽略的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_74-展示忽略的文件"}},[t._v("#")]),t._v(" 74 | 展示忽略的文件")]),t._v(" "),e("p",[e("code",[t._v("git status --ignored")])]),t._v(" "),e("h2",{attrs:{id:"_75-commit-历史中显示-branch1-有的-但是-branch2没有的commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_75-commit-历史中显示-branch1-有的-但是-branch2没有的commit"}},[t._v("#")]),t._v(" 75 | commit 历史中显示 Branch1 有的，但是 Branch2没有的commit")]),t._v(" "),e("p",[e("code",[t._v("git log Branch1 ^Branch2")])]),t._v(" "),e("h2",{attrs:{id:"_76-在-commit-log-中显示-gpg-签名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_76-在-commit-log-中显示-gpg-签名"}},[t._v("#")]),t._v(" 76 | 在 commit log 中显示 GPG 签名")]),t._v(" "),e("p",[e("code",[t._v("git log --show-signature")])]),t._v(" "),e("h2",{attrs:{id:"_77-删除全局设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_77-删除全局设置"}},[t._v("#")]),t._v(" 77 | 删除全局设置")]),t._v(" "),e("p",[e("code",[t._v("git config --global --unset <entry-name>")])]),t._v(" "),e("h2",{attrs:{id:"_78-新建并切换到新分支上-同时这个分支没有任何-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_78-新建并切换到新分支上-同时这个分支没有任何-commit"}},[t._v("#")]),t._v(" 78 | 新建并切换到新分支上，同时这个分支没有任何 "),e("strong",[t._v("commit")])]),t._v(" "),e("p",[t._v("相当于保存修改，但是重写 commit 历史")]),t._v(" "),e("p",[e("code",[t._v("git checkout --orphan <branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_79-展示任意分支某一文件的内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_79-展示任意分支某一文件的内容"}},[t._v("#")]),t._v(" 79 | 展示任意分支某一文件的内容")]),t._v(" "),e("p",[e("code",[t._v("git show <branch-name>:<file-name>")])]),t._v(" "),e("h2",{attrs:{id:"_80-clone-下来指定的单一分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_80-clone-下来指定的单一分支"}},[t._v("#")]),t._v(" 80 | clone 下来指定的单一分支")]),t._v(" "),e("p",[e("code",[t._v("git clone -b <branch-name> --single-branch https://github.com/user/repo.git")])]),t._v(" "),e("h2",{attrs:{id:"_81-clone-最新一次提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_81-clone-最新一次提交"}},[t._v("#")]),t._v(" 81 | clone 最新一次提交")]),t._v(" "),e("p",[t._v("只会 clone 最近一次提交，将减少 clone 时间")]),t._v(" "),e("p",[e("code",[t._v("git clone --depth=1 https://github.com/user/repo.git")])]),t._v(" "),e("h2",{attrs:{id:"_82-忽略某个文件的改动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_82-忽略某个文件的改动"}},[t._v("#")]),t._v(" 82 | 忽略某个文件的改动")]),t._v(" "),e("p",[t._v("关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动")]),t._v(" "),e("p",[e("code",[t._v("git update-index --assume-unchanged path/to/file")])]),t._v(" "),e("p",[t._v("恢复 track 指定文件的改动")]),t._v(" "),e("p",[e("code",[t._v("git update-index --no-assume-unchanged path/to/file")])]),t._v(" "),e("h2",{attrs:{id:"_83-忽略文件的权限变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_83-忽略文件的权限变化"}},[t._v("#")]),t._v(" 83 | 忽略文件的权限变化")]),t._v(" "),e("p",[t._v("不再将文件的权限变化视作改动")]),t._v(" "),e("p",[e("code",[t._v("git config core.fileMode false")])]),t._v(" "),e("h2",{attrs:{id:"_84-以最后提交的顺序列出所有-git-分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_84-以最后提交的顺序列出所有-git-分支"}},[t._v("#")]),t._v(" 84 | 以最后提交的顺序列出所有 Git 分支")]),t._v(" "),e("p",[t._v("最新的放在最上面")]),t._v(" "),e("p",[e("code",[t._v("git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/")])]),t._v(" "),e("h2",{attrs:{id:"_85-在-commit-log-中查找相关内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_85-在-commit-log-中查找相关内容"}},[t._v("#")]),t._v(" 85 | 在 commit log 中查找相关内容")]),t._v(" "),e("p",[t._v("通过 grep 查找，given-text：所需要查找的字段")]),t._v(" "),e("p",[e("code",[t._v("git log --all --grep='<given-text>'")])]),t._v(" "),e("h2",{attrs:{id:"_86-把暂存区的指定-file-放到工作区中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_86-把暂存区的指定-file-放到工作区中"}},[t._v("#")]),t._v(" 86 | 把暂存区的指定 ﬁle 放到工作区中")]),t._v(" "),e("p",[t._v("不添加参数，默认是 -mixed")]),t._v(" "),e("p",[e("code",[t._v("git reset <file-name>")])]),t._v(" "),e("h2",{attrs:{id:"_87-强制推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_87-强制推送"}},[t._v("#")]),t._v(" 87 | 强制推送")]),t._v(" "),e("p",[e("code",[t._v("git push -f <remote-name> <branch-name>")])]),t._v(" "),e("h2",{attrs:{id:"_88-git-配置-http-和-socks-代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_88-git-配置-http-和-socks-代理"}},[t._v("#")]),t._v(" 88 | git 配置 http 和 socks 代理")]),t._v(" "),e("p",[e("code",[t._v("git config --global https.proxy 'http://127.0.0.1:8001'")]),t._v(" # 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口")]),t._v(" "),e("p",[e("code",[t._v("git config --global http.proxy 'http://127.0.0.1:8001'")])]),t._v(" "),e("p",[e("code",[t._v('git config --global socks.proxy "127.0.0.1:1080"')])]),t._v(" "),e("h2",{attrs:{id:"_89-git-配置-ssh-代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_89-git-配置-ssh-代理"}},[t._v("#")]),t._v(" 89 | git 配置 ssh 代理")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.ssh/config\nHost gitlab.com\nProxyCommand "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" -X "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" -x "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:1080 %h %p "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接使用 shadowsocks 提供的 socks5 代理端口")]),t._v("\n\nHost github.com\nProxyCommand "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("nc")]),t._v(" -X "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" -x "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:1080 %h %p\n")])])]),e("h2",{attrs:{id:"_90-一图详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_90-一图详解"}},[t._v("#")]),t._v(" 90 | 一图详解")]),t._v(" "),e("h2",{attrs:{id:"_91-优雅的提交commit信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_91-优雅的提交commit信息"}},[t._v("#")]),t._v(" 91 | 优雅的提交Commit信息")]),t._v(" "),e("p",[t._v("使用"),e("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular")]),e("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("团队提交规范")])]),t._v(" "),e("p",[t._v("主要有以下组成")]),t._v(" "),e("ul",[e("li",[t._v("标题行: 必填, 描述主要修改类型和内容")]),t._v(" "),e("li",[t._v("主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等")]),t._v(" "),e("li",[t._v("页脚注释: 放 Breaking Changes 或 Closed Issues")])]),t._v(" "),e("p",[t._v("常用的修改项")]),t._v(" "),e("ul",[e("li",[t._v("type: commit 的类型")]),t._v(" "),e("li",[t._v("feat: 新特性")]),t._v(" "),e("li",[t._v("ﬁx: 修改问题")]),t._v(" "),e("li",[t._v("refactor: 代码重构")]),t._v(" "),e("li",[t._v("docs: 文档修改")]),t._v(" "),e("li",[t._v("style: 代码格式修改, 注意不是 css 修改")]),t._v(" "),e("li",[t._v("test: 测试用例修改")]),t._v(" "),e("li",[t._v("chore: 其他修改, 比如构建流程, 依赖管理.")]),t._v(" "),e("li",[t._v("scope: commit 影响的范围, 比如: route, component, utils, build...")]),t._v(" "),e("li",[t._v("subject: commit 的概述")]),t._v(" "),e("li",[t._v("body: commit 具体修改内容, 可以分为多行")]),t._v(" "),e("li",[t._v("footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.")])]),t._v(" "),e("h2",{attrs:{id:"_92-使用commitizen代替-git-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_92-使用commitizen代替-git-commit"}},[t._v("#")]),t._v(" 92 | 使用Commitizen代替 git commit")]),t._v(" "),e("p",[t._v("可以使用"),e("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-cli")]),t._v("工具代替 git commit")]),t._v(" "),e("p",[t._v("全局安装")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g commitizen cz-conventional-changelog\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{ "path": "cz-conventional-changelog" }\'')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ~/.czrc\n")])])]),e("p",[t._v("全局安装后使用 git cz 代替 git commit就可以了,如下图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/small-universe/file-bed/raw/master/tools/Git/2021-11-4-20:21:39-image-20211104200750975.png",alt:"image-20211104200750975"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);