(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{724:function(t,v,e){"use strict";e.r(v);var _=e(137),o=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("美好的事物往往是整洁而优雅的，但这并不等于简单")])]),t._v(" "),e("h2",{attrs:{id:"一、为什么要学习tomcat-架构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么要学习tomcat-架构设计"}},[t._v("#")]),t._v(" 一、为什么要学习Tomcat 架构设计")]),t._v(" "),e("p",[e("strong",[t._v("宏观上看")])]),t._v(" "),e("p",[t._v("Tomcat 作为一个 「"),e("code",[t._v("Http")]),t._v(" 服务器 + "),e("code",[t._v("Servlet")]),t._v(" 容器」，对我们屏蔽了应用层协议和网络通信细节，给我们的是标准的 "),e("code",[t._v("Request")]),t._v(" 和 "),e("code",[t._v("Response")]),t._v(" 对象；对于具体的业务逻辑则作为变化点，交给我们来实现。我们使用了"),e("code",[t._v("SpringMVC")]),t._v(" 之类的框架，可是却从来不需要考虑 "),e("code",[t._v("TCP")]),t._v(" 连接、 "),e("code",[t._v("Http")]),t._v(" 协议的数据处理与响应。就是因为 Tomcat 已经为我们做好了这些，我们只需要关注每个请求的具体业务逻辑。")]),t._v(" "),e("p",[e("strong",[t._v("微观上看")])]),t._v(" "),e("p",[e("code",[t._v("Tomcat")]),t._v(" 内部也隔离了变化点与不变点，使用了组件化设计，目的就是为了实现「"),e("strong",[e("code",[t._v("俄罗斯套娃式")])]),t._v("」的高度定制化（组合模式），而每个组件的生命周期管理又有一些共性的东西，则被提取出来成为接口和抽象类，让具体子类实现变化点，也就是"),e("strong",[t._v("模板方法设计模式")]),t._v("。")]),t._v(" "),e("p",[t._v("当今流行的微服务也是这个思路，按照功能将单体应用拆成「"),e("strong",[e("code",[t._v("微服务")])]),t._v("」，拆分过程要将共性提取出来，而这些共性就会成为核心的基础服务或者通用库。「"),e("strong",[e("code",[t._v("中台")])]),t._v("」思想亦是如此。")]),t._v(" "),e("blockquote",[e("p",[t._v("设计模式往往就是封装变化的一把利器，合理的运用设计模式能让我们的代码与系统设计变得优雅且整洁。")])]),t._v(" "),e("p",[t._v("这就是学习"),e("strong",[t._v("优秀开源软件")]),t._v("能获得的「内功」，从不会过时，其中的设计思想与哲学才是根本之道。从中借鉴设计经验，合理运用设计模式封装变与不变，更能从它们的源码中汲取经验，提升自己的系统设计能力。")]),t._v(" "),e("p",[t._v("学习 Tomcat 的原理，我发现 "),e("code",[t._v("Servlet")]),t._v(" 技术是 Web 开发的原点，几乎所有的 Java Web 框架（比如 Spring）都是基于 "),e("code",[t._v("Servlet")]),t._v(" 的封装，Spring 应用本身就是一个 "),e("code",[t._v("Servlet")]),t._v("（DispatchSevlet），而 Tomcat 和 Jetty 这样的 Web 容器，负责加载和运行 "),e("code",[t._v("Servlet")]),t._v("。如图所示：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/small-universe/file-bed/raw/master/tomcat/2021-10-25-00:27:57-image-20210817004309407.png",alt:"image-20210817004309407"}}),t._v(" "),e("p",[t._v("学习 Tomcat ，我还发现用到不少 Java 高级技术，比如 Java 多线程并发编程、Socket 网络编程以及反射等")]),t._v(" "),e("p",[t._v("还有就是系统设计能力，比如面向接口编程、组件化组合模式、骨架抽象类、一键式启停、对象池技术以及各种设计模式，比如模板方法、观察者模式、责任链模式等，之后我也开始模仿它们并把这些设计思想运用到实际的工作中。")]),t._v(" "),e("h2",{attrs:{id:"三、tomcat整体架构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、tomcat整体架构设计"}},[t._v("#")]),t._v(" 三、Tomcat整体架构设计")]),t._v(" "),e("p",[t._v("Tomcat 启动流程：")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("startup.sh -> catalina.sh start ->java -jar org.apache.catalina.startup.Bootstrap.main()")])])]),t._v(" "),e("p",[t._v("Tomcat 实现的 2 个核心功能：")]),t._v(" "),e("ul",[e("li",[t._v("处理 "),e("code",[t._v("Socket")]),t._v(" 连接，负责网络字节流与 "),e("code",[t._v("Request")]),t._v(" 和 "),e("code",[t._v("Response")]),t._v(" 对象的转化。")]),t._v(" "),e("li",[t._v("加载并管理 "),e("code",[t._v("Servlet")]),t._v(" ，以及处理具体的 "),e("code",[t._v("Request")]),t._v(" 请求。")])]),t._v(" "),e("p",[e("strong",[t._v("所以 Tomcat 设计了两个核心组件连接器（Connector）和容器（Container）。连接器负责对外交流，容器负责内部 处理")])]),t._v(" "),e("p",[e("code",[t._v("Tomcat")]),t._v("为了实现支持多种 "),e("code",[t._v("I/O")]),t._v(" 模型和应用层协议，一个容器可能对接多个连接器，就好比一个房间有多个门。")])])}),[],!1,null,null,null);v.default=o.exports}}]);